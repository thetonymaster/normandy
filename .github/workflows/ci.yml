name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  MIX_ENV: test
  ELIXIR_VERSION: '1.15'
  OTP_VERSION: '26'

jobs:
  test:
    name: Test (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ['1.15', '1.16', '1.17']
        otp: ['26', '27']
        exclude:
          # OTP 27 requires Elixir 1.17+
          - elixir: '1.15'
            otp: '27'
          - elixir: '1.16'
            otp: '27'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile dependencies
        run: mix deps.compile

      - name: Check formatting
        run: mix format --check-formatted
        if: matrix.elixir == '1.17' && matrix.otp == '27'

      - name: Compile project (warnings as errors)
        run: mix compile --warnings-as-errors

      - name: Run unit tests
        run: mix test --exclude integration --exclude normandy_integration

      - name: Generate coverage report
        run: mix test --cover --exclude integration --exclude normandy_integration
        if: matrix.elixir == '1.17' && matrix.otp == '27'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Only run integration tests if unit tests pass
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Run integration tests
        env:
          # Set API key from GitHub secrets if available
          API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          if [ -n "$API_KEY" ]; then
            echo "Running integration tests with API key"
            export API_KEY="$API_KEY"
            mix test --only integration --only normandy_integration
          else
            echo "⚠️  Skipping integration tests - ANTHROPIC_API_KEY secret not set"
            echo "To run integration tests in CI, add ANTHROPIC_API_KEY to repository secrets"
            exit 0
          fi

  dialyzer:
    name: Dialyzer (Type Checking)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-

      - name: Restore PLT cache
        uses: actions/cache@v4
        id: plt-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Create PLTs directory
        run: mkdir -p priv/plts

      - name: Build PLT
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Run Dialyzer
        run: mix dialyzer --format github

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Install dependencies
        run: mix deps.get

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused

      - name: Check for outdated dependencies
        run: mix hex.outdated
        continue-on-error: true

  all-checks-complete:
    name: All Checks Passed
    if: always()
    needs: [test, integration-tests, dialyzer, dependency-audit]
    runs-on: ubuntu-latest

    steps:
      - name: Check all job results
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.dialyzer.result }}" != "success" ] || \
             [ "${{ needs.dependency-audit.result }}" != "success" ]; then
            echo "❌ Some required checks failed"
            exit 1
          fi

          # Integration tests are allowed to be skipped (when API key not available)
          if [ "${{ needs.integration-tests.result }}" != "success" ] && \
             [ "${{ needs.integration-tests.result }}" != "skipped" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi

          echo "✅ All checks passed!"
